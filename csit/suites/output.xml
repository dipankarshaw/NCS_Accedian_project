<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.6.9 on linux)" generated="20200410 06:56:14.770" rpa="false">
<suite id="s1" name="P2P" source="/home/colt123/PycharmProjects/IQ-NET_L2-Lab/csit/suites/P2P.robot">
<kw name="Setup Actions" library="Resource" type="setup">
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Setup Actions done here</arg>
</arguments>
<status status="PASS" starttime="20200410 06:56:15.110" endtime="20200410 06:56:15.111"></status>
</kw>
<kw name="Get Data" library="Connect_devices">
<assign>
<var>${Topo_data}</var>
</assign>
<msg timestamp="20200410 06:56:15.112" level="INFO">${Topo_data} = {'Topology Info': {'nodes': 4, 'links': 6}, 'Device_Details': {'NCS_R1': {'device_type': 'cisco_xr', 'ip': '10.91.126.199', 'port': '22', 'username': 'averma2', 'password': 'Ank#2018'}, 'NCS_R2': {'de...</msg>
<status status="PASS" starttime="20200410 06:56:15.111" endtime="20200410 06:56:15.112"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${Topo_data}</arg>
<arg>Device_Details</arg>
</arguments>
<assign>
<var>${DEV_DICT}</var>
</assign>
<msg timestamp="20200410 06:56:15.112" level="INFO">${DEV_DICT} = {'NCS_R1': {'device_type': 'cisco_xr', 'ip': '10.91.126.199', 'port': '22', 'username': 'averma2', 'password': 'Ank#2018'}, 'NCS_R2': {'device_type': 'cisco_xr', 'ip': '10.91.126.200', 'port': '22', '...</msg>
<status status="PASS" starttime="20200410 06:56:15.112" endtime="20200410 06:56:15.112"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${Topo_data}</arg>
<arg>Link_Details</arg>
</arguments>
<assign>
<var>${LINK_DICT}</var>
</assign>
<msg timestamp="20200410 06:56:15.113" level="INFO">${LINK_DICT} = {'Link_R1_R2': {'R1': 'TenGigE0/0/0/11', 'R2': 'TenGigE0/0/0/11'}, 'Link_R3': {'R3_1': 'PORT-1', 'R3_5': 'PORT-5'}, 'Link_R4': {'R4U': 'PORT-1', 'R4N': 'PORT-2'}}</msg>
<status status="PASS" starttime="20200410 06:56:15.113" endtime="20200410 06:56:15.113"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${LINK_DICT}</arg>
<arg>Link_R1_R2</arg>
</arguments>
<assign>
<var>${Link_R1_R2}</var>
</assign>
<msg timestamp="20200410 06:56:15.114" level="INFO">${Link_R1_R2} = {'R1': 'TenGigE0/0/0/11', 'R2': 'TenGigE0/0/0/11'}</msg>
<status status="PASS" starttime="20200410 06:56:15.113" endtime="20200410 06:56:15.114"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${Link_R1_R2}</arg>
<arg>R1</arg>
</arguments>
<assign>
<var>${PORT_R1_10}</var>
</assign>
<msg timestamp="20200410 06:56:15.114" level="INFO">${PORT_R1_10} = TenGigE0/0/0/11</msg>
<status status="PASS" starttime="20200410 06:56:15.114" endtime="20200410 06:56:15.115"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${Link_R1_R2}</arg>
<arg>R2</arg>
</arguments>
<assign>
<var>${PORT_R2_10}</var>
</assign>
<msg timestamp="20200410 06:56:15.115" level="INFO">${PORT_R2_10} = TenGigE0/0/0/11</msg>
<status status="PASS" starttime="20200410 06:56:15.115" endtime="20200410 06:56:15.115"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${PORT_R1_10}</arg>
</arguments>
<msg timestamp="20200410 06:56:15.116" level="INFO">${PORT_R1_10} = TenGigE0/0/0/11</msg>
<status status="PASS" starttime="20200410 06:56:15.115" endtime="20200410 06:56:15.116"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${PORT_R2_10}</arg>
</arguments>
<msg timestamp="20200410 06:56:15.117" level="INFO">${PORT_R2_10} = TenGigE0/0/0/11</msg>
<status status="PASS" starttime="20200410 06:56:15.116" endtime="20200410 06:56:15.117"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${DEV_DICT}</arg>
<arg>NCS_R1</arg>
</arguments>
<assign>
<var>${R1_DICT}</var>
</assign>
<msg timestamp="20200410 06:56:15.117" level="INFO">${R1_DICT} = {'device_type': 'cisco_xr', 'ip': '10.91.126.199', 'port': '22', 'username': 'averma2', 'password': 'Ank#2018'}</msg>
<status status="PASS" starttime="20200410 06:56:15.117" endtime="20200410 06:56:15.117"></status>
</kw>
<kw name="Make Connection" library="Connect_devices">
<arguments>
<arg>${R1_DICT}</arg>
</arguments>
<assign>
<var>${R1_net_connect}</var>
</assign>
<msg timestamp="20200410 06:56:25.972" level="INFO">&lt;netmiko.cisco.cisco_xr.CiscoXrSSH object at 0x7f0bee0df5c0&gt;
cisco_xr: RP/0/RP0/CPU0:ar13.BLB#</msg>
<msg timestamp="20200410 06:56:25.973" level="INFO">${R1_net_connect} = &lt;netmiko.cisco.cisco_xr.CiscoXrSSH object at 0x7f0bee0df5c0&gt;</msg>
<status status="PASS" starttime="20200410 06:56:15.118" endtime="20200410 06:56:25.973"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${R1_net_connect}</arg>
</arguments>
<msg timestamp="20200410 06:56:25.974" level="INFO">${R1_net_connect} = &lt;netmiko.cisco.cisco_xr.CiscoXrSSH object at 0x7f0bee0df5c0&gt;</msg>
<status status="PASS" starttime="20200410 06:56:25.973" endtime="20200410 06:56:25.974"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Connection Establihed to NCS_R1</arg>
</arguments>
<status status="PASS" starttime="20200410 06:56:25.974" endtime="20200410 06:56:25.975"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${DEV_DICT}</arg>
<arg>NCS_R2</arg>
</arguments>
<assign>
<var>${R2_DICT}</var>
</assign>
<msg timestamp="20200410 06:56:25.976" level="INFO">${R2_DICT} = {'device_type': 'cisco_xr', 'ip': '10.91.126.200', 'port': '22', 'username': 'averma2', 'password': 'Ank#2018'}</msg>
<status status="PASS" starttime="20200410 06:56:25.975" endtime="20200410 06:56:25.976"></status>
</kw>
<kw name="Make Connection" library="Connect_devices">
<arguments>
<arg>${R2_DICT}</arg>
</arguments>
<assign>
<var>${R2_net_connect}</var>
</assign>
<msg timestamp="20200410 06:56:36.422" level="INFO">&lt;netmiko.cisco.cisco_xr.CiscoXrSSH object at 0x7f0bee1145f8&gt;
cisco_xr: RP/0/RP0/CPU0:ar14.BLB#</msg>
<msg timestamp="20200410 06:56:36.422" level="INFO">${R2_net_connect} = &lt;netmiko.cisco.cisco_xr.CiscoXrSSH object at 0x7f0bee1145f8&gt;</msg>
<status status="PASS" starttime="20200410 06:56:25.976" endtime="20200410 06:56:36.422"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${R2_net_connect}</arg>
</arguments>
<msg timestamp="20200410 06:56:36.423" level="INFO">${R2_net_connect} = &lt;netmiko.cisco.cisco_xr.CiscoXrSSH object at 0x7f0bee1145f8&gt;</msg>
<status status="PASS" starttime="20200410 06:56:36.423" endtime="20200410 06:56:36.424"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Connection Establihed to NCS_R2</arg>
</arguments>
<status status="PASS" starttime="20200410 06:56:36.424" endtime="20200410 06:56:36.424"></status>
</kw>
<status status="PASS" starttime="20200410 06:56:15.110" endtime="20200410 06:56:36.425"></status>
</kw>
<test id="s1-t1" name="EPL_PTP_NCS-NCS_SubIntf">
<kw name="CONFIGURE POLICY-MAP-EGR" library="Resource">
<arguments>
<arg>${R1_net_connect}</arg>
<arg>${Pol_map_egr_template}</arg>
<arg>${Pol_map_egr_data}</arg>
</arguments>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 06:56:44.012" level="INFO">config term

RP/0/RP0/CPU0:ar13.BLB(config)#

RP/0/RP0/CPU0:ar13.BLB(config)#policy-map egr

RP/0/RP0/CPU0:ar13.BLB(config-pmap)# class class-default

RP/0/RP0/CPU0:ar13.BLB(config-pmap-c)#  bandwidth percent 100 

RP/0/RP0/CPU0:ar13.BLB(config-pmap-c)# ! 

RP/0/RP0/CPU0:ar13.BLB(config-pmap-c)# end-policy-map

RP/0/RP0/CPU0:ar13.BLB(config)#
commit
RP/0/RP0/CPU0:ar13.BLB(config)#
end

RP/0/RP0/CPU0:ar13.BLB#</msg>
<msg timestamp="20200410 06:56:44.012" level="INFO">${commit_result} = commit
RP/0/RP0/CPU0:ar13.BLB(config)#</msg>
<status status="PASS" starttime="20200410 06:56:36.428" endtime="20200410 06:56:44.012"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 06:56:44.013" endtime="20200410 06:56:44.013"></status>
</kw>
<status status="PASS" starttime="20200410 06:56:36.427" endtime="20200410 06:56:44.014"></status>
</kw>
<kw name="CONFIGURE POLICY-MAP-EGR" library="Resource">
<arguments>
<arg>${R2_net_connect}</arg>
<arg>${Pol_map_egr_template}</arg>
<arg>${Pol_map_egr_data}</arg>
</arguments>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 06:56:51.583" level="INFO">config term

RP/0/RP0/CPU0:ar14.BLB(config)#

RP/0/RP0/CPU0:ar14.BLB(config)#policy-map egr

RP/0/RP0/CPU0:ar14.BLB(config-pmap)# class class-default

RP/0/RP0/CPU0:ar14.BLB(config-pmap-c)#  bandwidth percent 100 

RP/0/RP0/CPU0:ar14.BLB(config-pmap-c)# ! 

RP/0/RP0/CPU0:ar14.BLB(config-pmap-c)# end-policy-map

RP/0/RP0/CPU0:ar14.BLB(config)#
commit
RP/0/RP0/CPU0:ar14.BLB(config)#
end

RP/0/RP0/CPU0:ar14.BLB#</msg>
<msg timestamp="20200410 06:56:51.584" level="INFO">${commit_result} = commit
RP/0/RP0/CPU0:ar14.BLB(config)#</msg>
<status status="PASS" starttime="20200410 06:56:44.015" endtime="20200410 06:56:51.584"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 06:56:51.584" endtime="20200410 06:56:51.585"></status>
</kw>
<status status="PASS" starttime="20200410 06:56:44.014" endtime="20200410 06:56:51.585"></status>
</kw>
<kw name="CONFIGURE SERVICE-POLICY-MAP" library="Resource">
<arguments>
<arg>${R1_net_connect}</arg>
<arg>${Ser_Pol_map_template}</arg>
<arg>${Ser_Pol_map_1G_data}</arg>
</arguments>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 06:56:59.262" level="INFO">config term

RP/0/RP0/CPU0:ar13.BLB(config)#

RP/0/RP0/CPU0:ar13.BLB(config)#policy-map BW-1Gbps-Class-test

RP/0/RP0/CPU0:ar13.BLB(config-pmap)#class class-default

RP/0/RP0/CPU0:ar13.BLB(config-pmap-c)#police rate 1000000 kbps burst 100 kbytes

RP/0/RP0/CPU0:ar13.BLB(config-pmap-c-police)#set traffic-class 2

RP/0/RP0/CPU0:ar13.BLB(config-pmap-c)#set qos-group 2

RP/0/RP0/CPU0:ar13.BLB(config-pmap-c)#end-policy-map

RP/0/RP0/CPU0:ar13.BLB(config)#
commit
RP/0/RP0/CPU0:ar13.BLB(config)#
end

RP/0/RP0/CPU0:ar13.BLB#</msg>
<msg timestamp="20200410 06:56:59.263" level="INFO">${commit_result} = commit
RP/0/RP0/CPU0:ar13.BLB(config)#</msg>
<status status="PASS" starttime="20200410 06:56:51.587" endtime="20200410 06:56:59.263"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 06:56:59.263" endtime="20200410 06:56:59.264"></status>
</kw>
<status status="PASS" starttime="20200410 06:56:51.586" endtime="20200410 06:56:59.264"></status>
</kw>
<kw name="CONFIGURE SERVICE-POLICY-MAP" library="Resource">
<arguments>
<arg>${R2_net_connect}</arg>
<arg>${Ser_Pol_map_template}</arg>
<arg>${Ser_Pol_map_1G_data}</arg>
</arguments>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 06:57:06.941" level="INFO">config term

RP/0/RP0/CPU0:ar14.BLB(config)#

RP/0/RP0/CPU0:ar14.BLB(config)#policy-map BW-1Gbps-Class-test

RP/0/RP0/CPU0:ar14.BLB(config-pmap)#class class-default

RP/0/RP0/CPU0:ar14.BLB(config-pmap-c)#police rate 1000000 kbps burst 100 kbytes

RP/0/RP0/CPU0:ar14.BLB(config-pmap-c-police)#set traffic-class 2

RP/0/RP0/CPU0:ar14.BLB(config-pmap-c)#set qos-group 2

RP/0/RP0/CPU0:ar14.BLB(config-pmap-c)#end-policy-map

RP/0/RP0/CPU0:ar14.BLB(config)#
commit
RP/0/RP0/CPU0:ar14.BLB(config)#
end

RP/0/RP0/CPU0:ar14.BLB#</msg>
<msg timestamp="20200410 06:57:06.941" level="INFO">${commit_result} = commit
RP/0/RP0/CPU0:ar14.BLB(config)#</msg>
<status status="PASS" starttime="20200410 06:56:59.265" endtime="20200410 06:57:06.941"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 06:57:06.942" endtime="20200410 06:57:06.942"></status>
</kw>
<status status="PASS" starttime="20200410 06:56:59.264" endtime="20200410 06:57:06.943"></status>
</kw>
<kw name="CONFIGURE INTERFACE" library="Resource">
<arguments>
<arg>${R1_net_connect}</arg>
<arg>${PORT_R1_10}</arg>
<arg>${NCS_int_template}</arg>
<arg>${R1_interface_data}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${template_data}</arg>
<arg>interface=${intf_name}</arg>
</arguments>
<status status="PASS" starttime="20200410 06:57:06.944" endtime="20200410 06:57:06.945"></status>
</kw>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 06:57:57.880" level="INFO">config term

Current Configuration Session  Line       User     Date                     Lock
00001000-00000bd7-0000000d     SYSTEM     SYSTEM   Fri Apr 10 07:07:55 2020 
RP/0/RP0/CPU0:ar13.BLB(config)#

RP/0/RP0/CPU0:ar13.BLB(config)#interface TenGigE0/0/0/11

RP/0/RP0/CPU0:ar13.BLB(config-if)# description Ankit - Automation Test Service

RP/0/RP0/CPU0:ar13.BLB(config-if)# mtu 9100

RP/0/RP0/CPU0:ar13.BLB(config-if)# service-policy output egr account user-defined 26

RP/0/RP0/CPU0:ar13.BLB(config-if)# lldp

RP/0/RP0/CPU0:ar13.BLB(config-lldp)#  receive disable

RP/0/RP0/CPU0:ar13.BLB(config-lldp)#  transmit disable

RP/0/RP0/CPU0:ar13.BLB(config-lldp)#  no shutdown

RP/0/RP0/CPU0:ar13.BLB(config-if)# !

RP/0/RP0/CPU0:ar13.BLB(config-if)# load-interval 30

RP/0/RP0/CPU0:ar13.BLB(config-if)# loopback internal

RP/0/RP0/CPU0:ar13.BLB(config-if)#!

RP/0/RP0/CPU0:ar13.BLB(config-if)#
commit
System configuration operation in progress: Commit database consolidation.
Please wait or use control-c to cancel this operation...............
System configuration operation complete, commit proceeding.
RP/0/RP0/CPU0:ar13.BLB(config-if)#
end

RP/0/RP0/CPU0:ar13.BLB#</msg>
<msg timestamp="20200410 06:57:57.881" level="INFO">${commit_result} = commit
System configuration operation in progress: Commit database consolidation.
Please wait or use control-c to cancel this operation...............
System configuration operation complete, commit p...</msg>
<status status="PASS" starttime="20200410 06:57:06.945" endtime="20200410 06:57:57.881"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 06:57:57.881" endtime="20200410 06:57:57.882"></status>
</kw>
<status status="PASS" starttime="20200410 06:57:06.943" endtime="20200410 06:57:57.882"></status>
</kw>
<kw name="CONFIGURE INTERFACE" library="Resource">
<arguments>
<arg>${R2_net_connect}</arg>
<arg>${PORT_R2_10}</arg>
<arg>${NCS_int_template}</arg>
<arg>${R2_interface_data}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${template_data}</arg>
<arg>interface=${intf_name}</arg>
</arguments>
<status status="PASS" starttime="20200410 06:57:57.884" endtime="20200410 06:57:57.884"></status>
</kw>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 06:58:05.857" level="INFO">config term

RP/0/RP0/CPU0:ar14.BLB(config)#

RP/0/RP0/CPU0:ar14.BLB(config)#interface TenGigE0/0/0/11

RP/0/RP0/CPU0:ar14.BLB(config-if)# description Ankit - Automation Test Service

RP/0/RP0/CPU0:ar14.BLB(config-if)# mtu 9100

RP/0/RP0/CPU0:ar14.BLB(config-if)# service-policy output egr account user-defined 26

RP/0/RP0/CPU0:ar14.BLB(config-if)# lldp

RP/0/RP0/CPU0:ar14.BLB(config-lldp)#  receive disable

RP/0/RP0/CPU0:ar14.BLB(config-lldp)#  transmit disable

RP/0/RP0/CPU0:ar14.BLB(config-lldp)#  no shutdown

RP/0/RP0/CPU0:ar14.BLB(config-if)# !

RP/0/RP0/CPU0:ar14.BLB(config-if)# load-interval 30

RP/0/RP0/CPU0:ar14.BLB(config-if)# loopback internal

RP/0/RP0/CPU0:ar14.BLB(config-if)#!

RP/0/RP0/CPU0:ar14.BLB(config-if)#
commit
RP/0/RP0/CPU0:ar14.BLB(config-if)#
end

RP/0/RP0/CPU0:ar14.BLB#</msg>
<msg timestamp="20200410 06:58:05.858" level="INFO">${commit_result} = commit
RP/0/RP0/CPU0:ar14.BLB(config-if)#</msg>
<status status="PASS" starttime="20200410 06:57:57.885" endtime="20200410 06:58:05.858"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 06:58:05.858" endtime="20200410 06:58:05.859"></status>
</kw>
<status status="PASS" starttime="20200410 06:57:57.883" endtime="20200410 06:58:05.859"></status>
</kw>
<kw name="CONFIGURE SUB-INTERFACE" library="Resource">
<arguments>
<arg>${R1_net_connect}</arg>
<arg>${PORT_R1_10}.${sub_interface_4095}</arg>
<arg>${NCS_sub_int_PFD_template}</arg>
<arg>${R1_sub_interface_data}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${template_data}</arg>
<arg>sub_interface=${sub_intf_name}</arg>
</arguments>
<status status="PASS" starttime="20200410 06:58:05.861" endtime="20200410 06:58:05.861"></status>
</kw>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 06:58:13.432" level="INFO">config term

RP/0/RP0/CPU0:ar13.BLB(config)#

RP/0/RP0/CPU0:ar13.BLB(config)#interface TenGigE0/0/0/11.4095 l2transport

RP/0/RP0/CPU0:ar13.BLB(config-subif)# description Ankit - Automation Test Service

RP/0/RP0/CPU0:ar13.BLB(config-subif)# encapsulation default

RP/0/RP0/CPU0:ar13.BLB(config-subif)# no shutdown

RP/0/RP0/CPU0:ar13.BLB(config-subif)#
commit
RP/0/RP0/CPU0:ar13.BLB(config-subif)#
end

RP/0/RP0/CPU0:ar13.BLB#</msg>
<msg timestamp="20200410 06:58:13.432" level="INFO">${commit_result} = commit
RP/0/RP0/CPU0:ar13.BLB(config-subif)#</msg>
<status status="PASS" starttime="20200410 06:58:05.862" endtime="20200410 06:58:13.432"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 06:58:13.432" endtime="20200410 06:58:13.433"></status>
</kw>
<status status="PASS" starttime="20200410 06:58:05.859" endtime="20200410 06:58:13.433"></status>
</kw>
<kw name="CONFIGURE SUB-INTERFACE" library="Resource">
<arguments>
<arg>${R2_net_connect}</arg>
<arg>${PORT_R2_10}.${sub_interface_4095}</arg>
<arg>${NCS_sub_int_PFD_template}</arg>
<arg>${R2_sub_interface_data}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${template_data}</arg>
<arg>sub_interface=${sub_intf_name}</arg>
</arguments>
<status status="PASS" starttime="20200410 06:58:13.435" endtime="20200410 06:58:13.436"></status>
</kw>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 06:58:21.003" level="INFO">config term

RP/0/RP0/CPU0:ar14.BLB(config)#

RP/0/RP0/CPU0:ar14.BLB(config)#interface TenGigE0/0/0/11.4095 l2transport

RP/0/RP0/CPU0:ar14.BLB(config-subif)# description Ankit - Automation Test Service

RP/0/RP0/CPU0:ar14.BLB(config-subif)# encapsulation default

RP/0/RP0/CPU0:ar14.BLB(config-subif)# no shutdown

RP/0/RP0/CPU0:ar14.BLB(config-subif)#
commit
RP/0/RP0/CPU0:ar14.BLB(config-subif)#
end

RP/0/RP0/CPU0:ar14.BLB#</msg>
<msg timestamp="20200410 06:58:21.004" level="INFO">${commit_result} = commit
RP/0/RP0/CPU0:ar14.BLB(config-subif)#</msg>
<status status="PASS" starttime="20200410 06:58:13.436" endtime="20200410 06:58:21.004"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 06:58:21.004" endtime="20200410 06:58:21.005"></status>
</kw>
<status status="PASS" starttime="20200410 06:58:13.434" endtime="20200410 06:58:21.005"></status>
</kw>
<kw name="CONFIGURE SERVICE-POLICY-MAP-INTF" library="Resource">
<arguments>
<arg>${R1_net_connect}</arg>
<arg>${PORT_R1_10}.${sub_interface_4095}</arg>
<arg>${Ser_Pol_map_intf_template}</arg>
<arg>${Ser_Pol_map_1G_data}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${template_data}</arg>
<arg>policy_intf=${intf_name}</arg>
</arguments>
<status status="PASS" starttime="20200410 06:58:21.007" endtime="20200410 06:58:21.007"></status>
</kw>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 06:58:28.384" level="INFO">config term

RP/0/RP0/CPU0:ar13.BLB(config)#

RP/0/RP0/CPU0:ar13.BLB(config)#interface TenGigE0/0/0/11.4095 l2transport

RP/0/RP0/CPU0:ar13.BLB(config-subif)#service-policy input BW-1Gbps-Class-test

RP/0/RP0/CPU0:ar13.BLB(config-subif)#
commit
RP/0/RP0/CPU0:ar13.BLB(config-subif)#
end

RP/0/RP0/CPU0:ar13.BLB#</msg>
<msg timestamp="20200410 06:58:28.384" level="INFO">${commit_result} = commit
RP/0/RP0/CPU0:ar13.BLB(config-subif)#</msg>
<status status="PASS" starttime="20200410 06:58:21.008" endtime="20200410 06:58:28.384"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 06:58:28.385" endtime="20200410 06:58:28.385"></status>
</kw>
<status status="PASS" starttime="20200410 06:58:21.006" endtime="20200410 06:58:28.386"></status>
</kw>
<kw name="CONFIGURE SERVICE-POLICY-MAP-INTF" library="Resource">
<arguments>
<arg>${R2_net_connect}</arg>
<arg>${PORT_R2_10}.${sub_interface_4095}</arg>
<arg>${Ser_Pol_map_intf_template}</arg>
<arg>${Ser_Pol_map_1G_data}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${template_data}</arg>
<arg>policy_intf=${intf_name}</arg>
</arguments>
<status status="PASS" starttime="20200410 06:58:28.388" endtime="20200410 06:58:28.388"></status>
</kw>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 06:59:00.276" level="INFO">config term

Current Configuration Session  Line       User     Date                     Lock
00001000-00000c5e-0000000f     SYSTEM     SYSTEM   Fri Apr 10 07:09:16 2020 
RP/0/RP0/CPU0:ar14.BLB(config)#

RP/0/RP0/CPU0:ar14.BLB(config)#interface TenGigE0/0/0/11.4095 l2transport

RP/0/RP0/CPU0:ar14.BLB(config-subif)#service-policy input BW-1Gbps-Class-test

RP/0/RP0/CPU0:ar14.BLB(config-subif)#
commit
System configuration operation in progress: Commit database consolidation.
Please wait or use control-c to cancel this operation.........
System configuration operation complete, commit proceeding.
RP/0/RP0/CPU0:ar14.BLB(config-subif)#
end

RP/0/RP0/CPU0:ar14.BLB#</msg>
<msg timestamp="20200410 06:59:00.276" level="INFO">${commit_result} = commit
System configuration operation in progress: Commit database consolidation.
Please wait or use control-c to cancel this operation.........
System configuration operation complete, commit proceed...</msg>
<status status="PASS" starttime="20200410 06:58:28.389" endtime="20200410 06:59:00.276"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 06:59:00.277" endtime="20200410 06:59:00.277"></status>
</kw>
<status status="PASS" starttime="20200410 06:58:28.387" endtime="20200410 06:59:00.277"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>interface=${PORT_R1_10}</arg>
</arguments>
<assign>
<var>${template_data}</var>
</assign>
<msg timestamp="20200410 06:59:00.280" level="INFO">${template_data} = {'interface': 'TenGigE0/0/0/11'}</msg>
<status status="PASS" starttime="20200410 06:59:00.278" endtime="20200410 06:59:00.280"></status>
</kw>
<kw name="SHOW COMMAND" library="Resource">
<arguments>
<arg>${R1_net_connect}</arg>
<arg>show_interface_template</arg>
<arg>${template_data}</arg>
</arguments>
<assign>
<var>${show_result}</var>
</assign>
<kw name="Show Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${${template_name}}</arg>
<arg>template_data=${template_data}</arg>
<arg>textfsm_template=${template_name}</arg>
</arguments>
<assign>
<var>${show_cmd_result}</var>
</assign>
<msg timestamp="20200410 06:59:01.393" level="INFO">show interface TenGigE0/0/0/11 brief

               Intf       Intf        LineP              Encap  MTU        BW
               Name       State       State               Type (byte)    (Kbps)
--------------------------------------------------------------------------------
         Te0/0/0/11          up          up               ARPA  9100   10000000</msg>
<msg timestamp="20200410 06:59:01.393" level="INFO">${show_cmd_result} = INTERFACE     INTF_STATE     LINEP_STATE
Te0/0/0/11        up        up
</msg>
<status status="PASS" starttime="20200410 06:59:00.281" endtime="20200410 06:59:01.393"></status>
</kw>
<msg timestamp="20200410 06:59:01.394" level="INFO">${show_result} = INTERFACE     INTF_STATE     LINEP_STATE
Te0/0/0/11        up        up
</msg>
<status status="PASS" starttime="20200410 06:59:00.280" endtime="20200410 06:59:01.394"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${show_result}</arg>
</arguments>
<status status="PASS" starttime="20200410 06:59:01.394" endtime="20200410 06:59:01.395"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${show_result}</arg>
<arg>${intf_status}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${show_result}</arg>
<arg>${intf_status}</arg>
</arguments>
<status status="PASS" starttime="20200410 06:59:01.396" endtime="20200410 06:59:01.397"></status>
</kw>
<status status="PASS" starttime="20200410 06:59:01.396" endtime="20200410 06:59:01.397"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>interface=${PORT_R1_10}.${sub_interface_4095}</arg>
</arguments>
<assign>
<var>${template_data}</var>
</assign>
<msg timestamp="20200410 06:59:01.399" level="INFO">${template_data} = {'interface': 'TenGigE0/0/0/11.4095'}</msg>
<status status="PASS" starttime="20200410 06:59:01.398" endtime="20200410 06:59:01.399"></status>
</kw>
<kw name="SHOW COMMAND" library="Resource">
<arguments>
<arg>${R1_net_connect}</arg>
<arg>show_interface_template</arg>
<arg>${template_data}</arg>
</arguments>
<assign>
<var>${show_result}</var>
</assign>
<kw name="Show Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${${template_name}}</arg>
<arg>template_data=${template_data}</arg>
<arg>textfsm_template=${template_name}</arg>
</arguments>
<assign>
<var>${show_cmd_result}</var>
</assign>
<msg timestamp="20200410 06:59:02.510" level="INFO">show interface TenGigE0/0/0/11.4095 brief

               Intf       Intf        LineP              Encap  MTU        BW
               Name       State       State               Type (byte)    (Kbps)
--------------------------------------------------------------------------------
    Te0/0/0/11.4095          up          up             802.1Q  9100   10000000</msg>
<msg timestamp="20200410 06:59:02.510" level="INFO">${show_cmd_result} = INTERFACE     INTF_STATE     LINEP_STATE
Te0/0/0/11.4095        up        up
</msg>
<status status="PASS" starttime="20200410 06:59:01.400" endtime="20200410 06:59:02.510"></status>
</kw>
<msg timestamp="20200410 06:59:02.511" level="INFO">${show_result} = INTERFACE     INTF_STATE     LINEP_STATE
Te0/0/0/11.4095        up        up
</msg>
<status status="PASS" starttime="20200410 06:59:01.399" endtime="20200410 06:59:02.511"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${show_result}</arg>
</arguments>
<status status="PASS" starttime="20200410 06:59:02.511" endtime="20200410 06:59:02.512"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${show_result}</arg>
<arg>${intf_status}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${show_result}</arg>
<arg>${intf_status}</arg>
</arguments>
<status status="PASS" starttime="20200410 06:59:02.513" endtime="20200410 06:59:02.514"></status>
</kw>
<status status="PASS" starttime="20200410 06:59:02.512" endtime="20200410 06:59:02.514"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>interface=${PORT_R2_10}</arg>
</arguments>
<assign>
<var>${template_data}</var>
</assign>
<msg timestamp="20200410 06:59:02.515" level="INFO">${template_data} = {'interface': 'TenGigE0/0/0/11'}</msg>
<status status="PASS" starttime="20200410 06:59:02.514" endtime="20200410 06:59:02.515"></status>
</kw>
<kw name="SHOW COMMAND" library="Resource">
<arguments>
<arg>${R2_net_connect}</arg>
<arg>show_interface_template</arg>
<arg>${template_data}</arg>
</arguments>
<assign>
<var>${show_result}</var>
</assign>
<kw name="Show Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${${template_name}}</arg>
<arg>template_data=${template_data}</arg>
<arg>textfsm_template=${template_name}</arg>
</arguments>
<assign>
<var>${show_cmd_result}</var>
</assign>
<msg timestamp="20200410 06:59:03.626" level="INFO">show interface TenGigE0/0/0/11 brief

               Intf       Intf        LineP              Encap  MTU        BW
               Name       State       State               Type (byte)    (Kbps)
--------------------------------------------------------------------------------
         Te0/0/0/11          up          up               ARPA  9100   10000000</msg>
<msg timestamp="20200410 06:59:03.626" level="INFO">${show_cmd_result} = INTERFACE     INTF_STATE     LINEP_STATE
Te0/0/0/11        up        up
</msg>
<status status="PASS" starttime="20200410 06:59:02.517" endtime="20200410 06:59:03.626"></status>
</kw>
<msg timestamp="20200410 06:59:03.627" level="INFO">${show_result} = INTERFACE     INTF_STATE     LINEP_STATE
Te0/0/0/11        up        up
</msg>
<status status="PASS" starttime="20200410 06:59:02.516" endtime="20200410 06:59:03.627"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${show_result}</arg>
</arguments>
<status status="PASS" starttime="20200410 06:59:03.627" endtime="20200410 06:59:03.628"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${show_result}</arg>
<arg>${intf_status}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${show_result}</arg>
<arg>${intf_status}</arg>
</arguments>
<status status="PASS" starttime="20200410 06:59:03.629" endtime="20200410 06:59:03.630"></status>
</kw>
<status status="PASS" starttime="20200410 06:59:03.628" endtime="20200410 06:59:03.630"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>interface=${PORT_R2_10}.${sub_interface_4095}</arg>
</arguments>
<assign>
<var>${template_data}</var>
</assign>
<msg timestamp="20200410 06:59:03.631" level="INFO">${template_data} = {'interface': 'TenGigE0/0/0/11.4095'}</msg>
<status status="PASS" starttime="20200410 06:59:03.630" endtime="20200410 06:59:03.631"></status>
</kw>
<kw name="SHOW COMMAND" library="Resource">
<arguments>
<arg>${R2_net_connect}</arg>
<arg>show_interface_template</arg>
<arg>${template_data}</arg>
</arguments>
<assign>
<var>${show_result}</var>
</assign>
<kw name="Show Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${${template_name}}</arg>
<arg>template_data=${template_data}</arg>
<arg>textfsm_template=${template_name}</arg>
</arguments>
<assign>
<var>${show_cmd_result}</var>
</assign>
<msg timestamp="20200410 06:59:04.741" level="INFO">show interface TenGigE0/0/0/11.4095 brief

               Intf       Intf        LineP              Encap  MTU        BW
               Name       State       State               Type (byte)    (Kbps)
--------------------------------------------------------------------------------
    Te0/0/0/11.4095          up          up             802.1Q  9100   10000000</msg>
<msg timestamp="20200410 06:59:04.742" level="INFO">${show_cmd_result} = INTERFACE     INTF_STATE     LINEP_STATE
Te0/0/0/11.4095        up        up
</msg>
<status status="PASS" starttime="20200410 06:59:03.633" endtime="20200410 06:59:04.742"></status>
</kw>
<msg timestamp="20200410 06:59:04.742" level="INFO">${show_result} = INTERFACE     INTF_STATE     LINEP_STATE
Te0/0/0/11.4095        up        up
</msg>
<status status="PASS" starttime="20200410 06:59:03.632" endtime="20200410 06:59:04.742"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${show_result}</arg>
</arguments>
<status status="PASS" starttime="20200410 06:59:04.743" endtime="20200410 06:59:04.744"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${show_result}</arg>
<arg>${intf_status}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${show_result}</arg>
<arg>${intf_status}</arg>
</arguments>
<status status="PASS" starttime="20200410 06:59:04.745" endtime="20200410 06:59:04.745"></status>
</kw>
<status status="PASS" starttime="20200410 06:59:04.744" endtime="20200410 06:59:04.746"></status>
</kw>
<kw name="CONFIGURE EVPN" library="Resource">
<arguments>
<arg>${R1_net_connect}</arg>
<arg>${EVPN_template}</arg>
<arg>${R1_evpn_data}</arg>
</arguments>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 06:59:12.330" level="INFO">config term

RP/0/RP0/CPU0:ar13.BLB(config)#

RP/0/RP0/CPU0:ar13.BLB(config)#evpn

RP/0/RP0/CPU0:ar13.BLB(config-evpn)# evi 2100

RP/0/RP0/CPU0:ar13.BLB(config-evpn-instance)#  bgp

RP/0/RP0/CPU0:ar13.BLB(config-evpn-instance-bgp)#   rd 8220001:2100

RP/0/RP0/CPU0:ar13.BLB(config-evpn-instance-bgp)#   route-target import 8220001:2100

RP/0/RP0/CPU0:ar13.BLB(config-evpn-instance-bgp)#   route-target export 8220001:2100

RP/0/RP0/CPU0:ar13.BLB(config-evpn-instance-bgp)#
commit
RP/0/RP0/CPU0:ar13.BLB(config-evpn-instance-bgp)#
end

RP/0/RP0/CPU0:ar13.BLB#</msg>
<msg timestamp="20200410 06:59:12.331" level="INFO">${commit_result} = commit
RP/0/RP0/CPU0:ar13.BLB(config-evpn-instance-bgp)#</msg>
<status status="PASS" starttime="20200410 06:59:04.747" endtime="20200410 06:59:12.331"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 06:59:12.331" endtime="20200410 06:59:12.332"></status>
</kw>
<status status="PASS" starttime="20200410 06:59:04.746" endtime="20200410 06:59:12.332"></status>
</kw>
<kw name="CONFIGURE L2VPN" library="Resource">
<arguments>
<arg>${R1_net_connect}</arg>
<arg>${PORT_R1_10}.${sub_interface_4095}</arg>
<arg>${L2VPN_template}</arg>
<arg>${R1_l2vpn_data}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${template_data}</arg>
<arg>attch_ckt_intf=${sub_intf_name}</arg>
</arguments>
<status status="PASS" starttime="20200410 06:59:12.334" endtime="20200410 06:59:12.334"></status>
</kw>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 06:59:19.815" level="INFO">config term

RP/0/RP0/CPU0:ar13.BLB(config)#

RP/0/RP0/CPU0:ar13.BLB(config)#l2vpn

RP/0/RP0/CPU0:ar13.BLB(config-l2vpn)# xconnect group AR13_AR14_LE-500134

RP/0/RP0/CPU0:ar13.BLB(config-l2vpn-xc)#  p2p AR13_AR14_LE-500134

RP/0/RP0/CPU0:ar13.BLB(config-l2vpn-xc-p2p)#   interface TenGigE0/0/0/11.4095

RP/0/RP0/CPU0:ar13.BLB(config-l2vpn-xc-p2p)#   neighbor evpn evi 2100 target 134 source 143

RP/0/RP0/CPU0:ar13.BLB(config-l2vpn-xc-p2p-pw)#
commit
RP/0/RP0/CPU0:ar13.BLB(config-l2vpn-xc-p2p-pw)#
end

RP/0/RP0/CPU0:ar13.BLB#</msg>
<msg timestamp="20200410 06:59:19.816" level="INFO">${commit_result} = commit
RP/0/RP0/CPU0:ar13.BLB(config-l2vpn-xc-p2p-pw)#</msg>
<status status="PASS" starttime="20200410 06:59:12.335" endtime="20200410 06:59:19.816"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 06:59:19.816" endtime="20200410 06:59:19.817"></status>
</kw>
<status status="PASS" starttime="20200410 06:59:12.332" endtime="20200410 06:59:19.817"></status>
</kw>
<kw name="CONFIGURE EVPN" library="Resource">
<arguments>
<arg>${R2_net_connect}</arg>
<arg>${EVPN_template}</arg>
<arg>${R2_evpn_data}</arg>
</arguments>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 06:59:28.091" level="INFO">config term

RP/0/RP0/CPU0:ar14.BLB(config)#

RP/0/RP0/CPU0:ar14.BLB(config)#evpn

RP/0/RP0/CPU0:ar14.BLB(config-evpn)# evi 2100

RP/0/RP0/CPU0:ar14.BLB(config-evpn-instance)#  bgp

RP/0/RP0/CPU0:ar14.BLB(config-evpn-instance-bgp)#   rd 8220001:2100

RP/0/RP0/CPU0:ar14.BLB(config-evpn-instance-bgp)#   route-target import 8220001:2100

RP/0/RP0/CPU0:ar14.BLB(config-evpn-instance-bgp)#   route-target export 8220001:2100

RP/0/RP0/CPU0:ar14.BLB(config-evpn-instance-bgp)#
commit
RP/0/RP0/CPU0:ar14.BLB(config-evpn-instance-bgp)#
end

RP/0/RP0/CPU0:ar14.BLB#</msg>
<msg timestamp="20200410 06:59:28.091" level="INFO">${commit_result} = commit
RP/0/RP0/CPU0:ar14.BLB(config-evpn-instance-bgp)#</msg>
<status status="PASS" starttime="20200410 06:59:19.818" endtime="20200410 06:59:28.091"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 06:59:28.091" endtime="20200410 06:59:28.092"></status>
</kw>
<status status="PASS" starttime="20200410 06:59:19.817" endtime="20200410 06:59:28.092"></status>
</kw>
<kw name="CONFIGURE L2VPN" library="Resource">
<arguments>
<arg>${R2_net_connect}</arg>
<arg>${PORT_R2_10}.${sub_interface_4095}</arg>
<arg>${L2VPN_template}</arg>
<arg>${R2_l2vpn_data}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${template_data}</arg>
<arg>attch_ckt_intf=${sub_intf_name}</arg>
</arguments>
<status status="PASS" starttime="20200410 06:59:28.094" endtime="20200410 06:59:28.095"></status>
</kw>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 06:59:35.664" level="INFO">config term

RP/0/RP0/CPU0:ar14.BLB(config)#

RP/0/RP0/CPU0:ar14.BLB(config)#l2vpn

RP/0/RP0/CPU0:ar14.BLB(config-l2vpn)# xconnect group AR13_AR14_LE-500134

RP/0/RP0/CPU0:ar14.BLB(config-l2vpn-xc)#  p2p AR13_AR14_LE-500134

RP/0/RP0/CPU0:ar14.BLB(config-l2vpn-xc-p2p)#   interface TenGigE0/0/0/11.4095

RP/0/RP0/CPU0:ar14.BLB(config-l2vpn-xc-p2p)#   neighbor evpn evi 2100 target 143 source 134

RP/0/RP0/CPU0:ar14.BLB(config-l2vpn-xc-p2p-pw)#
commit
RP/0/RP0/CPU0:ar14.BLB(config-l2vpn-xc-p2p-pw)#
end

RP/0/RP0/CPU0:ar14.BLB#</msg>
<msg timestamp="20200410 06:59:35.665" level="INFO">${commit_result} = commit
RP/0/RP0/CPU0:ar14.BLB(config-l2vpn-xc-p2p-pw)#</msg>
<status status="PASS" starttime="20200410 06:59:28.095" endtime="20200410 06:59:35.665"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 06:59:35.665" endtime="20200410 06:59:35.666"></status>
</kw>
<status status="PASS" starttime="20200410 06:59:28.093" endtime="20200410 06:59:35.666"></status>
</kw>
<kw name="SHOW COMMAND" library="Resource">
<arguments>
<arg>${R1_net_connect}</arg>
<arg>show_L2VPN_template</arg>
<arg>${R1_l2vpn_data}</arg>
</arguments>
<assign>
<var>${show_result}</var>
</assign>
<kw name="Show Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${${template_name}}</arg>
<arg>template_data=${template_data}</arg>
<arg>textfsm_template=${template_name}</arg>
</arguments>
<assign>
<var>${show_cmd_result}</var>
</assign>
<msg timestamp="20200410 06:59:36.779" level="INFO">show l2vpn xconnect group AR13_AR14_LE-500134
Legend: ST = State, UP = Up, DN = Down, AD = Admin Down, UR = Unresolved,
        SB = Standby, SR = Standby Ready, (PP) = Partially Programmed

XConnect                   Segment 1                       Segment 2                
Group      Name       ST   Description            ST       Description            ST    
------------------------   -----------------------------   -----------------------------
AR13_AR14_LE-500134
           AR13_AR14_LE-500134
                      UP   Te0/0/0/11.4095        UP       EVPN 2100,134,10.91.126.200 
                                                                                  UP    
----------------------------------------------------------------------------------------</msg>
<msg timestamp="20200410 06:59:36.779" level="INFO">${show_cmd_result} = XCON_GR     NAME     SEG1_ST     SEG2_ST     STATE
AR13_AR14_LE-500134        AR13_AR14_LE-500134        UP        UP        UP
</msg>
<status status="PASS" starttime="20200410 06:59:35.668" endtime="20200410 06:59:36.780"></status>
</kw>
<msg timestamp="20200410 06:59:36.780" level="INFO">${show_result} = XCON_GR     NAME     SEG1_ST     SEG2_ST     STATE
AR13_AR14_LE-500134        AR13_AR14_LE-500134        UP        UP        UP
</msg>
<status status="PASS" starttime="20200410 06:59:35.667" endtime="20200410 06:59:36.780"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${show_result}</arg>
</arguments>
<status status="PASS" starttime="20200410 06:59:36.781" endtime="20200410 06:59:36.781"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${show_result}</arg>
<arg>${L2VPN_status}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${show_result}</arg>
<arg>${L2VPN_status}</arg>
</arguments>
<status status="PASS" starttime="20200410 06:59:36.782" endtime="20200410 06:59:36.783"></status>
</kw>
<status status="PASS" starttime="20200410 06:59:36.782" endtime="20200410 06:59:36.783"></status>
</kw>
<kw name="SHOW COMMAND" library="Resource">
<arguments>
<arg>${R2_net_connect}</arg>
<arg>show_L2VPN_template</arg>
<arg>${R2_l2vpn_data}</arg>
</arguments>
<assign>
<var>${show_result}</var>
</assign>
<kw name="Show Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${${template_name}}</arg>
<arg>template_data=${template_data}</arg>
<arg>textfsm_template=${template_name}</arg>
</arguments>
<assign>
<var>${show_cmd_result}</var>
</assign>
<msg timestamp="20200410 06:59:37.693" level="INFO">show l2vpn xconnect group AR13_AR14_LE-500134
Legend: ST = State, UP = Up, DN = Down, AD = Admin Down, UR = Unresolved,
        SB = Standby, SR = Standby Ready, (PP) = Partially Programmed

XConnect                   Segment 1                       Segment 2                
Group      Name       ST   Description            ST       Description            ST    
------------------------   -----------------------------   -----------------------------
AR13_AR14_LE-500134
           AR13_AR14_LE-500134
                      UP   Te0/0/0/11.4095        UP       EVPN 2100,143,10.91.126.199 
                                                                                  UP    
----------------------------------------------------------------------------------------</msg>
<msg timestamp="20200410 06:59:37.694" level="INFO">${show_cmd_result} = XCON_GR     NAME     SEG1_ST     SEG2_ST     STATE
AR13_AR14_LE-500134        AR13_AR14_LE-500134        UP        UP        UP
</msg>
<status status="PASS" starttime="20200410 06:59:36.785" endtime="20200410 06:59:37.694"></status>
</kw>
<msg timestamp="20200410 06:59:37.695" level="INFO">${show_result} = XCON_GR     NAME     SEG1_ST     SEG2_ST     STATE
AR13_AR14_LE-500134        AR13_AR14_LE-500134        UP        UP        UP
</msg>
<status status="PASS" starttime="20200410 06:59:36.784" endtime="20200410 06:59:37.695"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${show_result}</arg>
</arguments>
<status status="PASS" starttime="20200410 06:59:37.695" endtime="20200410 06:59:37.696"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${show_result}</arg>
<arg>${L2VPN_status}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${show_result}</arg>
<arg>${L2VPN_status}</arg>
</arguments>
<status status="PASS" starttime="20200410 06:59:37.697" endtime="20200410 06:59:37.698"></status>
</kw>
<status status="PASS" starttime="20200410 06:59:37.696" endtime="20200410 06:59:37.698"></status>
</kw>
<kw name="CONFIGURE CFM" library="Resource">
<arguments>
<arg>${R1_net_connect}</arg>
<arg>${CFM_template}</arg>
<arg>${R1_cfm_data}</arg>
</arguments>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 06:59:45.580" level="INFO">config term

RP/0/RP0/CPU0:ar13.BLB(config)#

RP/0/RP0/CPU0:ar13.BLB(config)#ethernet cfm

RP/0/RP0/CPU0:ar13.BLB(config-cfm)# domain COLT-1 level 1 id null

RP/0/RP0/CPU0:ar13.BLB(config-cfm-dmn)#  service AR13_AR14_LE-500134 xconnect group AR13_AR14_LE-500134 p2p AR13_AR14_LE-500134 id icc-based LE XXX-500134

RP/0/RP0/CPU0:ar13.BLB(config-cfm-dmn-svc)#   continuity-check interval 1s

RP/0/RP0/CPU0:ar13.BLB(config-cfm-dmn-svc)#   mep crosscheck

RP/0/RP0/CPU0:ar13.BLB(config-cfm-xcheck)#    mep-id 2

RP/0/RP0/CPU0:ar13.BLB(config-cfm-xcheck)#   !

RP/0/RP0/CPU0:ar13.BLB(config-cfm-xcheck)#   log continuity-check errors

RP/0/RP0/CPU0:ar13.BLB(config-cfm-dmn-svc)#   log crosscheck errors

RP/0/RP0/CPU0:ar13.BLB(config-cfm-dmn-svc)#   log continuity-check mep changes

RP/0/RP0/CPU0:ar13.BLB(config-cfm-dmn-svc)#
commit
RP/0/RP0/CPU0:ar13.BLB(config-cfm-dmn-svc)#
end

RP/0/RP0/CPU0:ar13.BLB#</msg>
<msg timestamp="20200410 06:59:45.581" level="INFO">${commit_result} = commit
RP/0/RP0/CPU0:ar13.BLB(config-cfm-dmn-svc)#</msg>
<status status="PASS" starttime="20200410 06:59:37.699" endtime="20200410 06:59:45.581"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 06:59:45.581" endtime="20200410 06:59:45.582"></status>
</kw>
<status status="PASS" starttime="20200410 06:59:37.698" endtime="20200410 06:59:45.582"></status>
</kw>
<kw name="CONFIGURE CFM" library="Resource">
<arguments>
<arg>${R2_net_connect}</arg>
<arg>${CFM_template}</arg>
<arg>${R2_cfm_data}</arg>
</arguments>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 06:59:53.458" level="INFO">config term

RP/0/RP0/CPU0:ar14.BLB(config)#

RP/0/RP0/CPU0:ar14.BLB(config)#ethernet cfm

RP/0/RP0/CPU0:ar14.BLB(config-cfm)# domain COLT-1 level 1 id null

RP/0/RP0/CPU0:ar14.BLB(config-cfm-dmn)#  service AR13_AR14_LE-500134 xconnect group AR13_AR14_LE-500134 p2p AR13_AR14_LE-500134 id icc-based LE XXX-500134

RP/0/RP0/CPU0:ar14.BLB(config-cfm-dmn-svc)#   continuity-check interval 1s

RP/0/RP0/CPU0:ar14.BLB(config-cfm-dmn-svc)#   mep crosscheck

RP/0/RP0/CPU0:ar14.BLB(config-cfm-xcheck)#    mep-id 1

RP/0/RP0/CPU0:ar14.BLB(config-cfm-xcheck)#   !

RP/0/RP0/CPU0:ar14.BLB(config-cfm-xcheck)#   log continuity-check errors

RP/0/RP0/CPU0:ar14.BLB(config-cfm-dmn-svc)#   log crosscheck errors

RP/0/RP0/CPU0:ar14.BLB(config-cfm-dmn-svc)#   log continuity-check mep changes

RP/0/RP0/CPU0:ar14.BLB(config-cfm-dmn-svc)#
commit
RP/0/RP0/CPU0:ar14.BLB(config-cfm-dmn-svc)#
end

RP/0/RP0/CPU0:ar14.BLB#</msg>
<msg timestamp="20200410 06:59:53.458" level="INFO">${commit_result} = commit
RP/0/RP0/CPU0:ar14.BLB(config-cfm-dmn-svc)#</msg>
<status status="PASS" starttime="20200410 06:59:45.584" endtime="20200410 06:59:53.458"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 06:59:53.459" endtime="20200410 06:59:53.459"></status>
</kw>
<status status="PASS" starttime="20200410 06:59:45.583" endtime="20200410 06:59:53.460"></status>
</kw>
<kw name="CONFIGURE CFM-INTF" library="Resource">
<arguments>
<arg>${R1_net_connect}</arg>
<arg>${PORT_R1_10}.${sub_interface_4095}</arg>
<arg>${CFM_intf_template}</arg>
<arg>${R1_cfm_data}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${template_data}</arg>
<arg>cfm_ckt_intf=${intf_name}</arg>
</arguments>
<status status="PASS" starttime="20200410 06:59:53.461" endtime="20200410 06:59:53.462"></status>
</kw>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 07:00:01.044" level="INFO">config term

RP/0/RP0/CPU0:ar13.BLB(config)#

RP/0/RP0/CPU0:ar13.BLB(config)#interface TenGigE0/0/0/11.4095

RP/0/RP0/CPU0:ar13.BLB(config-subif)# ethernet cfm

RP/0/RP0/CPU0:ar13.BLB(config-if-cfm)#  mep domain COLT-1 service AR13_AR14_LE-500134 mep-id 1

RP/0/RP0/CPU0:ar13.BLB(config-if-cfm-mep)#   cos 2

RP/0/RP0/CPU0:ar13.BLB(config-if-cfm-mep)#
commit
RP/0/RP0/CPU0:ar13.BLB(config-if-cfm-mep)#
end

RP/0/RP0/CPU0:ar13.BLB#</msg>
<msg timestamp="20200410 07:00:01.045" level="INFO">${commit_result} = commit
RP/0/RP0/CPU0:ar13.BLB(config-if-cfm-mep)#</msg>
<status status="PASS" starttime="20200410 06:59:53.462" endtime="20200410 07:00:01.045"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 07:00:01.045" endtime="20200410 07:00:01.046"></status>
</kw>
<status status="PASS" starttime="20200410 06:59:53.460" endtime="20200410 07:00:01.046"></status>
</kw>
<kw name="CONFIGURE CFM-INTF" library="Resource">
<arguments>
<arg>${R2_net_connect}</arg>
<arg>${PORT_R2_10}.${sub_interface_4095}</arg>
<arg>${CFM_intf_template}</arg>
<arg>${R2_cfm_data}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${template_data}</arg>
<arg>cfm_ckt_intf=${intf_name}</arg>
</arguments>
<status status="PASS" starttime="20200410 07:00:01.048" endtime="20200410 07:00:01.048"></status>
</kw>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 07:00:08.621" level="INFO">config term

RP/0/RP0/CPU0:ar14.BLB(config)#

RP/0/RP0/CPU0:ar14.BLB(config)#interface TenGigE0/0/0/11.4095

RP/0/RP0/CPU0:ar14.BLB(config-subif)# ethernet cfm

RP/0/RP0/CPU0:ar14.BLB(config-if-cfm)#  mep domain COLT-1 service AR13_AR14_LE-500134 mep-id 2

RP/0/RP0/CPU0:ar14.BLB(config-if-cfm-mep)#   cos 2

RP/0/RP0/CPU0:ar14.BLB(config-if-cfm-mep)#
commit
RP/0/RP0/CPU0:ar14.BLB(config-if-cfm-mep)#
end

RP/0/RP0/CPU0:ar14.BLB#</msg>
<msg timestamp="20200410 07:00:08.622" level="INFO">${commit_result} = commit
RP/0/RP0/CPU0:ar14.BLB(config-if-cfm-mep)#</msg>
<status status="PASS" starttime="20200410 07:00:01.048" endtime="20200410 07:00:08.622"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 07:00:08.622" endtime="20200410 07:00:08.623"></status>
</kw>
<status status="PASS" starttime="20200410 07:00:01.046" endtime="20200410 07:00:08.623"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>80</arg>
</arguments>
<msg timestamp="20200410 07:01:28.624" level="INFO">Slept 1 minute 20 seconds</msg>
<status status="PASS" starttime="20200410 07:00:08.623" endtime="20200410 07:01:28.625"></status>
</kw>
<kw name="SHOW COMMAND" library="Resource">
<arguments>
<arg>${R1_net_connect}</arg>
<arg>show_eth_cfm_template</arg>
<arg>${R1_cfm_data}</arg>
</arguments>
<assign>
<var>${show_result}</var>
</assign>
<kw name="Show Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${${template_name}}</arg>
<arg>template_data=${template_data}</arg>
<arg>textfsm_template=${template_name}</arg>
</arguments>
<assign>
<var>${show_cmd_result}</var>
</assign>
<msg timestamp="20200410 07:01:29.737" level="INFO">show ethernet cfm services domain COLT-1 service AR13_AR14_LE-500134
Summary for Domain COLT-1 (level 1), Service AR13_AR14_LE-500134
=============================================================================
Domain ID: NULL, Service ID: ICC-based: LEXXX-500134
Service configured on P2P cross-connect AR13_AR14_LE-500134 in group AR13_AR14_LE-500134
CCM interval: 1s
Local MEPs: 1 total: all operational, no errors
Peer MEPs: 1 total: all operational, no errors
MIPs: 0, MIP creation rule: none</msg>
<msg timestamp="20200410 07:01:29.738" level="INFO">${show_cmd_result} = Local_Meps     Peer_Meps
Local MEPs: 1 total: all operational, no errors        
        Peer MEPs: 1 total: all operational, no errors
</msg>
<status status="PASS" starttime="20200410 07:01:28.626" endtime="20200410 07:01:29.738"></status>
</kw>
<msg timestamp="20200410 07:01:29.738" level="INFO">${show_result} = Local_Meps     Peer_Meps
Local MEPs: 1 total: all operational, no errors        
        Peer MEPs: 1 total: all operational, no errors
</msg>
<status status="PASS" starttime="20200410 07:01:28.625" endtime="20200410 07:01:29.738"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${show_result}</arg>
</arguments>
<status status="PASS" starttime="20200410 07:01:29.739" endtime="20200410 07:01:29.739"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${show_result}</arg>
<arg>${local_mep_info}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${show_result}</arg>
<arg>${local_mep_info}</arg>
</arguments>
<status status="PASS" starttime="20200410 07:01:29.740" endtime="20200410 07:01:29.741"></status>
</kw>
<status status="PASS" starttime="20200410 07:01:29.740" endtime="20200410 07:01:29.741"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${show_result}</arg>
<arg>${peer_mep_info}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${show_result}</arg>
<arg>${peer_mep_info}</arg>
</arguments>
<status status="PASS" starttime="20200410 07:01:29.742" endtime="20200410 07:01:29.743"></status>
</kw>
<status status="PASS" starttime="20200410 07:01:29.742" endtime="20200410 07:01:29.743"></status>
</kw>
<kw name="SHOW COMMAND" library="Resource">
<arguments>
<arg>${R2_net_connect}</arg>
<arg>show_eth_cfm_template</arg>
<arg>${R2_cfm_data}</arg>
</arguments>
<assign>
<var>${show_result}</var>
</assign>
<kw name="Show Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${${template_name}}</arg>
<arg>template_data=${template_data}</arg>
<arg>textfsm_template=${template_name}</arg>
</arguments>
<assign>
<var>${show_cmd_result}</var>
</assign>
<msg timestamp="20200410 07:01:30.855" level="INFO">show ethernet cfm services domain COLT-1 service AR13_AR14_LE-500134
Summary for Domain COLT-1 (level 1), Service AR13_AR14_LE-500134
=============================================================================
Domain ID: NULL, Service ID: ICC-based: LEXXX-500134
Service configured on P2P cross-connect AR13_AR14_LE-500134 in group AR13_AR14_LE-500134
CCM interval: 1s
Local MEPs: 1 total: all operational, no errors
Peer MEPs: 1 total: all operational, no errors
MIPs: 0, MIP creation rule: none</msg>
<msg timestamp="20200410 07:01:30.855" level="INFO">${show_cmd_result} = Local_Meps     Peer_Meps
Local MEPs: 1 total: all operational, no errors        
        Peer MEPs: 1 total: all operational, no errors
</msg>
<status status="PASS" starttime="20200410 07:01:29.744" endtime="20200410 07:01:30.855"></status>
</kw>
<msg timestamp="20200410 07:01:30.856" level="INFO">${show_result} = Local_Meps     Peer_Meps
Local MEPs: 1 total: all operational, no errors        
        Peer MEPs: 1 total: all operational, no errors
</msg>
<status status="PASS" starttime="20200410 07:01:29.743" endtime="20200410 07:01:30.856"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${show_result}</arg>
</arguments>
<status status="PASS" starttime="20200410 07:01:30.856" endtime="20200410 07:01:30.857"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${show_result}</arg>
<arg>${local_mep_info}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${show_result}</arg>
<arg>${local_mep_info}</arg>
</arguments>
<status status="PASS" starttime="20200410 07:01:30.858" endtime="20200410 07:01:30.859"></status>
</kw>
<status status="PASS" starttime="20200410 07:01:30.857" endtime="20200410 07:01:30.859"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${show_result}</arg>
<arg>${peer_mep_info}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${show_result}</arg>
<arg>${peer_mep_info}</arg>
</arguments>
<status status="PASS" starttime="20200410 07:01:30.860" endtime="20200410 07:01:30.860"></status>
</kw>
<status status="PASS" starttime="20200410 07:01:30.859" endtime="20200410 07:01:30.861"></status>
</kw>
<kw name="SHOW COMMAND" library="Resource">
<arguments>
<arg>${R1_net_connect}</arg>
<arg>show_L2VPN_template</arg>
<arg>${R1_l2vpn_data}</arg>
</arguments>
<assign>
<var>${show_result}</var>
</assign>
<kw name="Show Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${${template_name}}</arg>
<arg>template_data=${template_data}</arg>
<arg>textfsm_template=${template_name}</arg>
</arguments>
<assign>
<var>${show_cmd_result}</var>
</assign>
<msg timestamp="20200410 07:01:31.771" level="INFO">show l2vpn xconnect group AR13_AR14_LE-500134
Legend: ST = State, UP = Up, DN = Down, AD = Admin Down, UR = Unresolved,
        SB = Standby, SR = Standby Ready, (PP) = Partially Programmed

XConnect                   Segment 1                       Segment 2                
Group      Name       ST   Description            ST       Description            ST    
------------------------   -----------------------------   -----------------------------
AR13_AR14_LE-500134
           AR13_AR14_LE-500134
                      UP   Te0/0/0/11.4095        UP       EVPN 2100,134,10.91.126.200 
                                                                                  UP    
----------------------------------------------------------------------------------------</msg>
<msg timestamp="20200410 07:01:31.771" level="INFO">${show_cmd_result} = XCON_GR     NAME     SEG1_ST     SEG2_ST     STATE
AR13_AR14_LE-500134        AR13_AR14_LE-500134        UP        UP        UP
</msg>
<status status="PASS" starttime="20200410 07:01:30.862" endtime="20200410 07:01:31.772"></status>
</kw>
<msg timestamp="20200410 07:01:31.772" level="INFO">${show_result} = XCON_GR     NAME     SEG1_ST     SEG2_ST     STATE
AR13_AR14_LE-500134        AR13_AR14_LE-500134        UP        UP        UP
</msg>
<status status="PASS" starttime="20200410 07:01:30.861" endtime="20200410 07:01:31.772"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${show_result}</arg>
</arguments>
<status status="PASS" starttime="20200410 07:01:31.773" endtime="20200410 07:01:31.773"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${show_result}</arg>
<arg>${L2VPN_status}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${show_result}</arg>
<arg>${L2VPN_status}</arg>
</arguments>
<status status="PASS" starttime="20200410 07:01:31.774" endtime="20200410 07:01:31.775"></status>
</kw>
<status status="PASS" starttime="20200410 07:01:31.774" endtime="20200410 07:01:31.775"></status>
</kw>
<kw name="SHOW COMMAND" library="Resource">
<arguments>
<arg>${R2_net_connect}</arg>
<arg>show_L2VPN_template</arg>
<arg>${R2_l2vpn_data}</arg>
</arguments>
<assign>
<var>${show_result}</var>
</assign>
<kw name="Show Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${${template_name}}</arg>
<arg>template_data=${template_data}</arg>
<arg>textfsm_template=${template_name}</arg>
</arguments>
<assign>
<var>${show_cmd_result}</var>
</assign>
<msg timestamp="20200410 07:01:32.685" level="INFO">show l2vpn xconnect group AR13_AR14_LE-500134
Legend: ST = State, UP = Up, DN = Down, AD = Admin Down, UR = Unresolved,
        SB = Standby, SR = Standby Ready, (PP) = Partially Programmed

XConnect                   Segment 1                       Segment 2                
Group      Name       ST   Description            ST       Description            ST    
------------------------   -----------------------------   -----------------------------
AR13_AR14_LE-500134
           AR13_AR14_LE-500134
                      UP   Te0/0/0/11.4095        UP       EVPN 2100,143,10.91.126.199 
                                                                                  UP    
----------------------------------------------------------------------------------------</msg>
<msg timestamp="20200410 07:01:32.685" level="INFO">${show_cmd_result} = XCON_GR     NAME     SEG1_ST     SEG2_ST     STATE
AR13_AR14_LE-500134        AR13_AR14_LE-500134        UP        UP        UP
</msg>
<status status="PASS" starttime="20200410 07:01:31.776" endtime="20200410 07:01:32.685"></status>
</kw>
<msg timestamp="20200410 07:01:32.686" level="INFO">${show_result} = XCON_GR     NAME     SEG1_ST     SEG2_ST     STATE
AR13_AR14_LE-500134        AR13_AR14_LE-500134        UP        UP        UP
</msg>
<status status="PASS" starttime="20200410 07:01:31.775" endtime="20200410 07:01:32.686"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${show_result}</arg>
</arguments>
<status status="PASS" starttime="20200410 07:01:32.686" endtime="20200410 07:01:32.687"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${show_result}</arg>
<arg>${L2VPN_status}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${show_result}</arg>
<arg>${L2VPN_status}</arg>
</arguments>
<status status="PASS" starttime="20200410 07:01:32.688" endtime="20200410 07:01:32.689"></status>
</kw>
<status status="PASS" starttime="20200410 07:01:32.687" endtime="20200410 07:01:32.689"></status>
</kw>
<kw name="SHOW COMMAND" library="Resource">
<arguments>
<arg>${R1_net_connect}</arg>
<arg>show_eth_cfm_template</arg>
<arg>${R1_cfm_data}</arg>
</arguments>
<assign>
<var>${show_result}</var>
</assign>
<kw name="Show Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${${template_name}}</arg>
<arg>template_data=${template_data}</arg>
<arg>textfsm_template=${template_name}</arg>
</arguments>
<assign>
<var>${show_cmd_result}</var>
</assign>
<msg timestamp="20200410 07:01:33.800" level="INFO">show ethernet cfm services domain COLT-1 service AR13_AR14_LE-500134
Summary for Domain COLT-1 (level 1), Service AR13_AR14_LE-500134
=============================================================================
Domain ID: NULL, Service ID: ICC-based: LEXXX-500134
Service configured on P2P cross-connect AR13_AR14_LE-500134 in group AR13_AR14_LE-500134
CCM interval: 1s
Local MEPs: 1 total: all operational, no errors
Peer MEPs: 1 total: all operational, no errors
MIPs: 0, MIP creation rule: none</msg>
<msg timestamp="20200410 07:01:33.800" level="INFO">${show_cmd_result} = Local_Meps     Peer_Meps
Local MEPs: 1 total: all operational, no errors        
        Peer MEPs: 1 total: all operational, no errors
</msg>
<status status="PASS" starttime="20200410 07:01:32.690" endtime="20200410 07:01:33.800"></status>
</kw>
<msg timestamp="20200410 07:01:33.801" level="INFO">${show_result} = Local_Meps     Peer_Meps
Local MEPs: 1 total: all operational, no errors        
        Peer MEPs: 1 total: all operational, no errors
</msg>
<status status="PASS" starttime="20200410 07:01:32.689" endtime="20200410 07:01:33.801"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${show_result}</arg>
</arguments>
<status status="PASS" starttime="20200410 07:01:33.801" endtime="20200410 07:01:33.802"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${show_result}</arg>
<arg>${local_mep_info}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${show_result}</arg>
<arg>${local_mep_info}</arg>
</arguments>
<status status="PASS" starttime="20200410 07:01:33.803" endtime="20200410 07:01:33.804"></status>
</kw>
<status status="PASS" starttime="20200410 07:01:33.802" endtime="20200410 07:01:33.804"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${show_result}</arg>
<arg>${peer_mep_info}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${show_result}</arg>
<arg>${peer_mep_info}</arg>
</arguments>
<status status="PASS" starttime="20200410 07:01:33.805" endtime="20200410 07:01:33.806"></status>
</kw>
<status status="PASS" starttime="20200410 07:01:33.804" endtime="20200410 07:01:33.806"></status>
</kw>
<kw name="SHOW COMMAND" library="Resource">
<arguments>
<arg>${R2_net_connect}</arg>
<arg>show_eth_cfm_template</arg>
<arg>${R2_cfm_data}</arg>
</arguments>
<assign>
<var>${show_result}</var>
</assign>
<kw name="Show Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${${template_name}}</arg>
<arg>template_data=${template_data}</arg>
<arg>textfsm_template=${template_name}</arg>
</arguments>
<assign>
<var>${show_cmd_result}</var>
</assign>
<msg timestamp="20200410 07:01:34.917" level="INFO">show ethernet cfm services domain COLT-1 service AR13_AR14_LE-500134
Summary for Domain COLT-1 (level 1), Service AR13_AR14_LE-500134
=============================================================================
Domain ID: NULL, Service ID: ICC-based: LEXXX-500134
Service configured on P2P cross-connect AR13_AR14_LE-500134 in group AR13_AR14_LE-500134
CCM interval: 1s
Local MEPs: 1 total: all operational, no errors
Peer MEPs: 1 total: all operational, no errors
MIPs: 0, MIP creation rule: none</msg>
<msg timestamp="20200410 07:01:34.918" level="INFO">${show_cmd_result} = Local_Meps     Peer_Meps
Local MEPs: 1 total: all operational, no errors        
        Peer MEPs: 1 total: all operational, no errors
</msg>
<status status="PASS" starttime="20200410 07:01:33.807" endtime="20200410 07:01:34.918"></status>
</kw>
<msg timestamp="20200410 07:01:34.918" level="INFO">${show_result} = Local_Meps     Peer_Meps
Local MEPs: 1 total: all operational, no errors        
        Peer MEPs: 1 total: all operational, no errors
</msg>
<status status="PASS" starttime="20200410 07:01:33.806" endtime="20200410 07:01:34.919"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${show_result}</arg>
</arguments>
<status status="PASS" starttime="20200410 07:01:34.919" endtime="20200410 07:01:34.920"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${show_result}</arg>
<arg>${local_mep_info}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${show_result}</arg>
<arg>${local_mep_info}</arg>
</arguments>
<status status="PASS" starttime="20200410 07:01:34.921" endtime="20200410 07:01:34.921"></status>
</kw>
<status status="PASS" starttime="20200410 07:01:34.920" endtime="20200410 07:01:34.921"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${show_result}</arg>
<arg>${peer_mep_info}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${show_result}</arg>
<arg>${peer_mep_info}</arg>
</arguments>
<status status="PASS" starttime="20200410 07:01:34.922" endtime="20200410 07:01:34.923"></status>
</kw>
<status status="PASS" starttime="20200410 07:01:34.922" endtime="20200410 07:01:34.923"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4</arg>
</arguments>
<msg timestamp="20200410 07:01:38.924" level="INFO">Slept 4 seconds</msg>
<status status="PASS" starttime="20200410 07:01:34.923" endtime="20200410 07:01:38.924"></status>
</kw>
<kw name="SHOW COMMAND" library="Resource">
<arguments>
<arg>${R1_net_connect}</arg>
<arg>show_eth_cfm_template</arg>
<arg>${R1_cfm_data}</arg>
</arguments>
<assign>
<var>${show_result}</var>
</assign>
<kw name="Show Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${${template_name}}</arg>
<arg>template_data=${template_data}</arg>
<arg>textfsm_template=${template_name}</arg>
</arguments>
<assign>
<var>${show_cmd_result}</var>
</assign>
<msg timestamp="20200410 07:01:40.035" level="INFO">show ethernet cfm services domain COLT-1 service AR13_AR14_LE-500134
Summary for Domain COLT-1 (level 1), Service AR13_AR14_LE-500134
=============================================================================
Domain ID: NULL, Service ID: ICC-based: LEXXX-500134
Service configured on P2P cross-connect AR13_AR14_LE-500134 in group AR13_AR14_LE-500134
CCM interval: 1s
Local MEPs: 1 total: all operational, no errors
Peer MEPs: 1 total: all operational, no errors
MIPs: 0, MIP creation rule: none</msg>
<msg timestamp="20200410 07:01:40.036" level="INFO">${show_cmd_result} = Local_Meps     Peer_Meps
Local MEPs: 1 total: all operational, no errors        
        Peer MEPs: 1 total: all operational, no errors
</msg>
<status status="PASS" starttime="20200410 07:01:38.926" endtime="20200410 07:01:40.036"></status>
</kw>
<msg timestamp="20200410 07:01:40.036" level="INFO">${show_result} = Local_Meps     Peer_Meps
Local MEPs: 1 total: all operational, no errors        
        Peer MEPs: 1 total: all operational, no errors
</msg>
<status status="PASS" starttime="20200410 07:01:38.925" endtime="20200410 07:01:40.037"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${show_result}</arg>
</arguments>
<status status="PASS" starttime="20200410 07:01:40.037" endtime="20200410 07:01:40.038"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${show_result}</arg>
<arg>${local_mep_info}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${show_result}</arg>
<arg>${local_mep_info}</arg>
</arguments>
<status status="PASS" starttime="20200410 07:01:40.039" endtime="20200410 07:01:40.039"></status>
</kw>
<status status="PASS" starttime="20200410 07:01:40.038" endtime="20200410 07:01:40.040"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${show_result}</arg>
<arg>${peer_mep_info}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${show_result}</arg>
<arg>${peer_mep_info}</arg>
</arguments>
<status status="PASS" starttime="20200410 07:01:40.041" endtime="20200410 07:01:40.041"></status>
</kw>
<status status="PASS" starttime="20200410 07:01:40.040" endtime="20200410 07:01:40.041"></status>
</kw>
<kw name="SHOW COMMAND" library="Resource">
<arguments>
<arg>${R2_net_connect}</arg>
<arg>show_eth_cfm_template</arg>
<arg>${R2_cfm_data}</arg>
</arguments>
<assign>
<var>${show_result}</var>
</assign>
<kw name="Show Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${${template_name}}</arg>
<arg>template_data=${template_data}</arg>
<arg>textfsm_template=${template_name}</arg>
</arguments>
<assign>
<var>${show_cmd_result}</var>
</assign>
<msg timestamp="20200410 07:01:41.152" level="INFO">show ethernet cfm services domain COLT-1 service AR13_AR14_LE-500134
Summary for Domain COLT-1 (level 1), Service AR13_AR14_LE-500134
=============================================================================
Domain ID: NULL, Service ID: ICC-based: LEXXX-500134
Service configured on P2P cross-connect AR13_AR14_LE-500134 in group AR13_AR14_LE-500134
CCM interval: 1s
Local MEPs: 1 total: all operational, no errors
Peer MEPs: 1 total: all operational, no errors
MIPs: 0, MIP creation rule: none</msg>
<msg timestamp="20200410 07:01:41.153" level="INFO">${show_cmd_result} = Local_Meps     Peer_Meps
Local MEPs: 1 total: all operational, no errors        
        Peer MEPs: 1 total: all operational, no errors
</msg>
<status status="PASS" starttime="20200410 07:01:40.043" endtime="20200410 07:01:41.153"></status>
</kw>
<msg timestamp="20200410 07:01:41.153" level="INFO">${show_result} = Local_Meps     Peer_Meps
Local MEPs: 1 total: all operational, no errors        
        Peer MEPs: 1 total: all operational, no errors
</msg>
<status status="PASS" starttime="20200410 07:01:40.042" endtime="20200410 07:01:41.154"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${show_result}</arg>
</arguments>
<status status="PASS" starttime="20200410 07:01:41.154" endtime="20200410 07:01:41.155"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${show_result}</arg>
<arg>${local_mep_info}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${show_result}</arg>
<arg>${local_mep_info}</arg>
</arguments>
<status status="PASS" starttime="20200410 07:01:41.156" endtime="20200410 07:01:41.157"></status>
</kw>
<status status="PASS" starttime="20200410 07:01:41.155" endtime="20200410 07:01:41.157"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>should contain</arg>
<arg>${show_result}</arg>
<arg>${peer_mep_info}</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${show_result}</arg>
<arg>${peer_mep_info}</arg>
</arguments>
<status status="PASS" starttime="20200410 07:01:41.158" endtime="20200410 07:01:41.159"></status>
</kw>
<status status="PASS" starttime="20200410 07:01:41.157" endtime="20200410 07:01:41.159"></status>
</kw>
<kw name="UNCONFIGURE SUB-INTF" library="Resource">
<arguments>
<arg>${R1_net_connect}</arg>
<arg>${PORT_R1_10}.${sub_interface_4095}</arg>
<arg>${Del_NCS_sub_int_template}</arg>
<arg>${R1_sub_interface_data}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${template_data}</arg>
<arg>sub_interface=${sub_intf_name}</arg>
</arguments>
<status status="PASS" starttime="20200410 07:01:41.160" endtime="20200410 07:01:41.161"></status>
</kw>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 07:01:48.735" level="INFO">config term

RP/0/RP0/CPU0:ar13.BLB(config)#

RP/0/RP0/CPU0:ar13.BLB(config)#no interface TenGigE0/0/0/11.4095

RP/0/RP0/CPU0:ar13.BLB(config)#
commit
RP/0/RP0/CPU0:ar13.BLB(config)#
end

RP/0/RP0/CPU0:ar13.BLB#</msg>
<msg timestamp="20200410 07:01:48.736" level="INFO">${commit_result} = commit
RP/0/RP0/CPU0:ar13.BLB(config)#</msg>
<status status="PASS" starttime="20200410 07:01:41.161" endtime="20200410 07:01:48.736"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 07:01:48.736" endtime="20200410 07:01:48.737"></status>
</kw>
<status status="PASS" starttime="20200410 07:01:41.159" endtime="20200410 07:01:48.737"></status>
</kw>
<kw name="UNCONFIGURE SUB-INTF" library="Resource">
<arguments>
<arg>${R2_net_connect}</arg>
<arg>${PORT_R2_10}.${sub_interface_4095}</arg>
<arg>${Del_NCS_sub_int_template}</arg>
<arg>${R2_sub_interface_data}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${template_data}</arg>
<arg>sub_interface=${sub_intf_name}</arg>
</arguments>
<status status="PASS" starttime="20200410 07:01:48.739" endtime="20200410 07:01:48.740"></status>
</kw>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 07:01:56.109" level="INFO">config term

RP/0/RP0/CPU0:ar14.BLB(config)#

RP/0/RP0/CPU0:ar14.BLB(config)#no interface TenGigE0/0/0/11.4095

RP/0/RP0/CPU0:ar14.BLB(config)#
commit
RP/0/RP0/CPU0:ar14.BLB(config)#
end

RP/0/RP0/CPU0:ar14.BLB#</msg>
<msg timestamp="20200410 07:01:56.110" level="INFO">${commit_result} = commit
RP/0/RP0/CPU0:ar14.BLB(config)#</msg>
<status status="PASS" starttime="20200410 07:01:48.740" endtime="20200410 07:01:56.110"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 07:01:56.110" endtime="20200410 07:01:56.111"></status>
</kw>
<status status="PASS" starttime="20200410 07:01:48.738" endtime="20200410 07:01:56.111"></status>
</kw>
<kw name="UNCONFIGURE INTF" library="Resource">
<arguments>
<arg>${R1_net_connect}</arg>
<arg>${PORT_R1_10}</arg>
<arg>${Del_NCS_int_template}</arg>
<arg>${R1_interface_data}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${template_data}</arg>
<arg>interface=${intf_name}</arg>
</arguments>
<status status="PASS" starttime="20200410 07:01:56.113" endtime="20200410 07:01:56.113"></status>
</kw>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 07:02:03.681" level="INFO">config term

RP/0/RP0/CPU0:ar13.BLB(config)#

RP/0/RP0/CPU0:ar13.BLB(config)#no interface TenGigE0/0/0/11

RP/0/RP0/CPU0:ar13.BLB(config)#
commit
RP/0/RP0/CPU0:ar13.BLB(config)#
end

RP/0/RP0/CPU0:ar13.BLB#</msg>
<msg timestamp="20200410 07:02:03.682" level="INFO">${commit_result} = commit
RP/0/RP0/CPU0:ar13.BLB(config)#</msg>
<status status="PASS" starttime="20200410 07:01:56.114" endtime="20200410 07:02:03.682"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 07:02:03.682" endtime="20200410 07:02:03.683"></status>
</kw>
<status status="PASS" starttime="20200410 07:01:56.112" endtime="20200410 07:02:03.683"></status>
</kw>
<kw name="UNCONFIGURE INTF" library="Resource">
<arguments>
<arg>${R2_net_connect}</arg>
<arg>${PORT_R2_10}</arg>
<arg>${Del_NCS_int_template}</arg>
<arg>${R2_interface_data}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${template_data}</arg>
<arg>interface=${intf_name}</arg>
</arguments>
<status status="PASS" starttime="20200410 07:02:03.685" endtime="20200410 07:02:03.685"></status>
</kw>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 07:02:11.254" level="INFO">config term

RP/0/RP0/CPU0:ar14.BLB(config)#

RP/0/RP0/CPU0:ar14.BLB(config)#no interface TenGigE0/0/0/11

RP/0/RP0/CPU0:ar14.BLB(config)#
commit
RP/0/RP0/CPU0:ar14.BLB(config)#
end

RP/0/RP0/CPU0:ar14.BLB#</msg>
<msg timestamp="20200410 07:02:11.254" level="INFO">${commit_result} = commit
RP/0/RP0/CPU0:ar14.BLB(config)#</msg>
<status status="PASS" starttime="20200410 07:02:03.686" endtime="20200410 07:02:11.255"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 07:02:11.255" endtime="20200410 07:02:11.256"></status>
</kw>
<status status="PASS" starttime="20200410 07:02:03.684" endtime="20200410 07:02:11.256"></status>
</kw>
<kw name="UNCONFIGURE SERVICE-POLICY-MAP" library="Resource">
<arguments>
<arg>${R1_net_connect}</arg>
<arg>${Del_Ser_Pol_map_template}</arg>
<arg>${Ser_Pol_map_1G_data}</arg>
</arguments>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 07:02:18.627" level="INFO">config term

RP/0/RP0/CPU0:ar13.BLB(config)#

RP/0/RP0/CPU0:ar13.BLB(config)#no policy-map BW-1Gbps-Class-test

RP/0/RP0/CPU0:ar13.BLB(config)#
commit
RP/0/RP0/CPU0:ar13.BLB(config)#
end

RP/0/RP0/CPU0:ar13.BLB#</msg>
<msg timestamp="20200410 07:02:18.627" level="INFO">${commit_result} = commit
RP/0/RP0/CPU0:ar13.BLB(config)#</msg>
<status status="PASS" starttime="20200410 07:02:11.257" endtime="20200410 07:02:18.627"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 07:02:18.628" endtime="20200410 07:02:18.628"></status>
</kw>
<status status="PASS" starttime="20200410 07:02:11.256" endtime="20200410 07:02:18.628"></status>
</kw>
<kw name="UNCONFIGURE SERVICE-POLICY-MAP" library="Resource">
<arguments>
<arg>${R2_net_connect}</arg>
<arg>${Del_Ser_Pol_map_template}</arg>
<arg>${Ser_Pol_map_1G_data}</arg>
</arguments>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 07:02:25.999" level="INFO">config term

RP/0/RP0/CPU0:ar14.BLB(config)#

RP/0/RP0/CPU0:ar14.BLB(config)#no policy-map BW-1Gbps-Class-test

RP/0/RP0/CPU0:ar14.BLB(config)#
commit
RP/0/RP0/CPU0:ar14.BLB(config)#
end

RP/0/RP0/CPU0:ar14.BLB#</msg>
<msg timestamp="20200410 07:02:25.999" level="INFO">${commit_result} = commit
RP/0/RP0/CPU0:ar14.BLB(config)#</msg>
<status status="PASS" starttime="20200410 07:02:18.630" endtime="20200410 07:02:25.999"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 07:02:26.000" endtime="20200410 07:02:26.000"></status>
</kw>
<status status="PASS" starttime="20200410 07:02:18.629" endtime="20200410 07:02:26.000"></status>
</kw>
<kw name="UNCONFIGURE CFM" library="Resource">
<arguments>
<arg>${R1_net_connect}</arg>
<arg>${Del_CFM_template}</arg>
<arg>${R1_cfm_data}</arg>
</arguments>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 07:02:33.476" level="INFO">config term

RP/0/RP0/CPU0:ar13.BLB(config)#

RP/0/RP0/CPU0:ar13.BLB(config)#ethernet cfm

RP/0/RP0/CPU0:ar13.BLB(config-cfm)# domain COLT-1 level 1 id null

RP/0/RP0/CPU0:ar13.BLB(config-cfm-dmn)#  no service AR13_AR14_LE-500134 xconnect group AR13_AR14_LE-500134 p2p AR13_AR14_LE-500134 id icc-based LE XXX-500134

RP/0/RP0/CPU0:ar13.BLB(config-cfm-dmn)#
commit
RP/0/RP0/CPU0:ar13.BLB(config-cfm-dmn)#
end

RP/0/RP0/CPU0:ar13.BLB#</msg>
<msg timestamp="20200410 07:02:33.476" level="INFO">${commit_result} = commit
RP/0/RP0/CPU0:ar13.BLB(config-cfm-dmn)#</msg>
<status status="PASS" starttime="20200410 07:02:26.002" endtime="20200410 07:02:33.477"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 07:02:33.477" endtime="20200410 07:02:33.478"></status>
</kw>
<status status="PASS" starttime="20200410 07:02:26.001" endtime="20200410 07:02:33.478"></status>
</kw>
<kw name="UNCONFIGURE CFM" library="Resource">
<arguments>
<arg>${R2_net_connect}</arg>
<arg>${Del_CFM_template}</arg>
<arg>${R2_cfm_data}</arg>
</arguments>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 07:02:40.955" level="INFO">config term

RP/0/RP0/CPU0:ar14.BLB(config)#

RP/0/RP0/CPU0:ar14.BLB(config)#ethernet cfm

RP/0/RP0/CPU0:ar14.BLB(config-cfm)# domain COLT-1 level 1 id null

RP/0/RP0/CPU0:ar14.BLB(config-cfm-dmn)#  no service AR13_AR14_LE-500134 xconnect group AR13_AR14_LE-500134 p2p AR13_AR14_LE-500134 id icc-based LE XXX-500134

RP/0/RP0/CPU0:ar14.BLB(config-cfm-dmn)#
commit
RP/0/RP0/CPU0:ar14.BLB(config-cfm-dmn)#
end

RP/0/RP0/CPU0:ar14.BLB#</msg>
<msg timestamp="20200410 07:02:40.956" level="INFO">${commit_result} = commit
RP/0/RP0/CPU0:ar14.BLB(config-cfm-dmn)#</msg>
<status status="PASS" starttime="20200410 07:02:33.479" endtime="20200410 07:02:40.956"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 07:02:40.956" endtime="20200410 07:02:40.957"></status>
</kw>
<status status="PASS" starttime="20200410 07:02:33.478" endtime="20200410 07:02:40.957"></status>
</kw>
<kw name="UNCONFIGURE EVPN" library="Resource">
<arguments>
<arg>${R1_net_connect}</arg>
<arg>${Del_EVPN_template}</arg>
<arg>${R1_evpn_data}</arg>
</arguments>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 07:02:48.328" level="INFO">config term

RP/0/RP0/CPU0:ar13.BLB(config)#

RP/0/RP0/CPU0:ar13.BLB(config)#no evpn evi 2100

RP/0/RP0/CPU0:ar13.BLB(config)#
commit
RP/0/RP0/CPU0:ar13.BLB(config)#
end

RP/0/RP0/CPU0:ar13.BLB#</msg>
<msg timestamp="20200410 07:02:48.328" level="INFO">${commit_result} = commit
RP/0/RP0/CPU0:ar13.BLB(config)#</msg>
<status status="PASS" starttime="20200410 07:02:40.959" endtime="20200410 07:02:48.329"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 07:02:48.329" endtime="20200410 07:02:48.330"></status>
</kw>
<status status="PASS" starttime="20200410 07:02:40.958" endtime="20200410 07:02:48.330"></status>
</kw>
<kw name="UNCONFIGURE EVPN" library="Resource">
<arguments>
<arg>${R2_net_connect}</arg>
<arg>${Del_EVPN_template}</arg>
<arg>${R2_evpn_data}</arg>
</arguments>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 07:02:55.716" level="INFO">config term

RP/0/RP0/CPU0:ar14.BLB(config)#

RP/0/RP0/CPU0:ar14.BLB(config)#no evpn evi 2100

RP/0/RP0/CPU0:ar14.BLB(config)#
commit
RP/0/RP0/CPU0:ar14.BLB(config)#
end

RP/0/RP0/CPU0:ar14.BLB#</msg>
<msg timestamp="20200410 07:02:55.716" level="INFO">${commit_result} = commit
RP/0/RP0/CPU0:ar14.BLB(config)#</msg>
<status status="PASS" starttime="20200410 07:02:48.331" endtime="20200410 07:02:55.716"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 07:02:55.717" endtime="20200410 07:02:55.717"></status>
</kw>
<status status="PASS" starttime="20200410 07:02:48.330" endtime="20200410 07:02:55.717"></status>
</kw>
<kw name="UNCONFIGURE L2VPN" library="Resource">
<arguments>
<arg>${R1_net_connect}</arg>
<arg>${Del_L2VPN_template}</arg>
<arg>${R1_l2vpn_data}</arg>
</arguments>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 07:03:03.091" level="INFO">config term

RP/0/RP0/CPU0:ar13.BLB(config)#

RP/0/RP0/CPU0:ar13.BLB(config)#l2vpn 

RP/0/RP0/CPU0:ar13.BLB(config-l2vpn)#no xconnect group AR13_AR14_LE-500134

RP/0/RP0/CPU0:ar13.BLB(config-l2vpn)#
commit
RP/0/RP0/CPU0:ar13.BLB(config-l2vpn)#
end

RP/0/RP0/CPU0:ar13.BLB#</msg>
<msg timestamp="20200410 07:03:03.092" level="INFO">${commit_result} = commit
RP/0/RP0/CPU0:ar13.BLB(config-l2vpn)#</msg>
<status status="PASS" starttime="20200410 07:02:55.718" endtime="20200410 07:03:03.092"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 07:03:03.092" endtime="20200410 07:03:03.093"></status>
</kw>
<status status="PASS" starttime="20200410 07:02:55.718" endtime="20200410 07:03:03.093"></status>
</kw>
<kw name="UNCONFIGURE L2VPN" library="Resource">
<arguments>
<arg>${R2_net_connect}</arg>
<arg>${Del_L2VPN_template}</arg>
<arg>${R2_l2vpn_data}</arg>
</arguments>
<kw name="Configure Commands" library="Commands">
<arguments>
<arg>${connect_id}</arg>
<arg>template_name=${template_name}</arg>
<arg>template_data=${template_data}</arg>
</arguments>
<assign>
<var>${commit_result}</var>
</assign>
<msg timestamp="20200410 07:03:10.460" level="INFO">config term

RP/0/RP0/CPU0:ar14.BLB(config)#

RP/0/RP0/CPU0:ar14.BLB(config)#l2vpn 

RP/0/RP0/CPU0:ar14.BLB(config-l2vpn)#no xconnect group AR13_AR14_LE-500134

RP/0/RP0/CPU0:ar14.BLB(config-l2vpn)#
commit
RP/0/RP0/CPU0:ar14.BLB(config-l2vpn)#
end

RP/0/RP0/CPU0:ar14.BLB#</msg>
<msg timestamp="20200410 07:03:10.460" level="INFO">${commit_result} = commit
RP/0/RP0/CPU0:ar14.BLB(config-l2vpn)#</msg>
<status status="PASS" starttime="20200410 07:03:03.095" endtime="20200410 07:03:10.461"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${commit_result}</arg>
<arg>fail</arg>
</arguments>
<status status="PASS" starttime="20200410 07:03:10.461" endtime="20200410 07:03:10.462"></status>
</kw>
<status status="PASS" starttime="20200410 07:03:03.094" endtime="20200410 07:03:10.462"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>END OF TEST CASE</arg>
</arguments>
<status status="PASS" starttime="20200410 07:03:10.462" endtime="20200410 07:03:10.463"></status>
</kw>
<tags>
<tag>EPL_PTP_NCS-NCS_SubIntf</tag>
</tags>
<status status="PASS" starttime="20200410 06:56:36.425" endtime="20200410 07:03:10.464" critical="yes"></status>
</test>
<kw name="Teardown Actions" library="Resource" type="teardown">
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Teardown Actions done here</arg>
</arguments>
<status status="PASS" starttime="20200410 07:03:10.466" endtime="20200410 07:03:10.467"></status>
</kw>
<kw name="Close Connection" library="Connect_devices">
<arguments>
<arg>${R1_net_connect}</arg>
</arguments>
<msg timestamp="20200410 07:03:10.473" level="INFO">&lt;netmiko.cisco.cisco_xr.CiscoXrSSH object at 0x7f0bee0df5c0&gt; connection closed</msg>
<status status="PASS" starttime="20200410 07:03:10.467" endtime="20200410 07:03:10.473"></status>
</kw>
<kw name="Close Connection" library="Connect_devices">
<arguments>
<arg>${R2_net_connect}</arg>
</arguments>
<msg timestamp="20200410 07:03:10.577" level="INFO">&lt;netmiko.cisco.cisco_xr.CiscoXrSSH object at 0x7f0bee1145f8&gt; connection closed</msg>
<status status="PASS" starttime="20200410 07:03:10.473" endtime="20200410 07:03:10.578"></status>
</kw>
<status status="PASS" starttime="20200410 07:03:10.466" endtime="20200410 07:03:10.578"></status>
</kw>
<doc>A test suite with tests for P2P conenctivity.
Topology:-
____________________________


Testplan Goals:-
1. CHECK P2P EPL service.</doc>
<metadata>
<item name="Version">1.0
More Info For more information about Robot Framework see http://robotframework.org
Author Sathishkumar murugesan
Date 12 Dec 2017
Executed At HOST
Test Framework Robot Framework Python</item>
</metadata>
<status status="PASS" starttime="20200410 06:56:14.771" endtime="20200410 07:03:10.578"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="0">Critical Tests</stat>
<stat pass="1" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0">EPL_PTP_NCS-NCS_SubIntf</stat>
</tag>
<suite>
<stat pass="1" fail="0" id="s1" name="P2P">P2P</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
